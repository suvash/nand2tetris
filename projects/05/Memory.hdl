// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /* 
      Address : has 15 bits (indexed 0 to 14)

      For RAM16K
          0 : 000000000000000
      16383 : 011111111111111 

      For Screen 8K
      16384 : 100000000000000
      24575 : 101111111111111

      For Keyboard
      24576 : 110000000000000

      The interesting bits are
      14th bit and 13th bit
      -----------------------------------------
      00 | RAM16K addressing by rest bits
      01 | RAM16K addressing by rest bits
      10 | Screen addressing by rest bits
      11 | Keyboard adrdressing
      -----------------------------------------

      Since we have 2 bits that we can use to select
      we can use a DMux4Way to split the load signal

      Let's make a truth table for what we want
      we want to dmux the load signal based on the 13..14 bit
      | 14th | 13th | DMux4Way | signal
      ----------------------------------------------
      |    0 |    0 |     a    | load/read ram
      |    0 |    1 |     b    | load/read ram
      |    1 |    0 |     c    | load/read screen
      |    1 |    1 |     d    | read keyboard (load never needed)
       

    */

     /* Dmux the load signal */
     DMux4Way(in=load, sel=address[13..14], a=loadRam0, b=loadRam1, c=loadScr, d=notneeded);
 
     /* According to the table above, load ram in either cases */
     Or(a=loadRam0, b=loadRam1, out=loadRam);
 
     /* Only up to 13 bits needed to read/write the ram */
     RAM16K(in=in, load=loadRam, address=address[0..13], out=ramOut);
 
     /* Only up to 12 bits needed to read/write the screen */
     Screen(in=in, load=loadScr, address=address[0..12], out=scrOut);
 
     /* keyboard is read only, no need to adress and load */
     Keyboard(out=kbdOut);
 
     /* Now Mux them back using the same addressing flags */
     Mux4Way16(a=ramOut, b=ramOut, c=scrOut, d=kbdOut, sel=address[13..14], out=out);
}

