// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    /* if zx then x=0 */
    Mux16(sel=zx, a=x, b=false, out=zxval);

    /* if nx then x=!x */
    Not16(in=zxval, out=notzxval);
    Mux16(sel=nx, a=zxval, b=notzxval, out=xval);    

    /* if zy then y=0 */
    Mux16(sel=zy, a=y, b=false, out=zyval);

    /* if ny then y=!y */
    Not16(in=zyval, out=notzyval);
    Mux16(sel=ny, a=zyval, b=notzyval, out=yval);    

    /* if f then out=x+y else out=x&y */
    Add16(a=xval, b=yval, out=sum);
    And16(a=xval, b=yval, out=and);
    Mux16(sel=f, a=and, b=sum, out=fout);           

    /* if no then out=!out */
    Not16(in=fout, out=notfout);
    Mux16(sel=no, a=fout, b=notfout, out=out, out[0..7]=lowOut, out[8..15]=highOut, out[15]=msbout);      

    /* if out=0 then zr=1 else zr=0 */
    Or8Way(in=lowOut, out=outLow);
    Or8Way(in=highOut, out=outHigh);
    Or(a=outLow, b=outHigh, out=notzr);
    Not(in=notzr, out=zr);

    /* if out<0 then ng=1 else ng=0 */
    And(a=msbout, b=true, out=ng);
}
